#!/usr/bin/env ruby
require File.expand_path('../../lib/nomi_client', __FILE__)
require 'discordrb'

nomi_name = ARGV[0]
discord_bot_token = ARGV[1] || ENV['DISCORD_BOT_TOKEN']
nomi_token = ARGV[2] || ENV['NOMI_TOKEN']

raise RuntimeError.new("nomi_name not found. Pass the name of your nomi as the first argument!") if nomi_name.nil? || nomi_name.strip == ''
raise RuntimeError.new("DISCORD_BOT_TOKEN not found") if discord_bot_token.nil?
raise RuntimeError.new("NOMI_TOKEN not found") if nomi_token.nil?

puts "Starting up with #{discord_bot_token} and #{nomi_token}"

bot = Discordrb::Bot.new token: discord_bot_token

nomi_client = NomiClient.new(api_key: nomi_token)

puts "Bot name: #{bot.profile.username}"
nomi = nomi_client.select_nomi(nomi_name)
if nomi.nil?
  raise RuntimeError.new("Nomi #{nomi_name} not found")
else
  puts "Selected Nomi: #{nomi['name']} #{nomi['uuid']}"
end

def event_handler(event, nomi_client, options = {})
  bot = options[:bot]
  message_type = options[:message_type]

  message = event.content.to_s.downcase
  puts message
  roll = rand(100)

  nomi_client.other_bots[event.author.id] = true if event.author.bot_account

  response_chance = 100
  response_chance -= nomi_client.bot_count * 25
  response_chance = 15 if response_chance < 15

  should_answer_bot = rand(100) < 15
  should_answer = roll < response_chance

  mentioned_someone = event.message.mentions != []
  mentioned_me = event.message.mentions.include?(bot.profile)
  # always answer mentions
  should_answer = true if mentioned_me

  puts "should_answer: #{should_answer} Roll: #{roll} Response Chance: #{response_chance} mentioned_me: #{mentioned_me} mentioned_someone: #{mentioned_someone}"

  # never answer other people's mentions
  if mentioned_someone && !mentioned_me
    puts "Ignoring mention that doesn't include me"

  elsif event.author.bot_account && !should_answer_bot
    puts "Ignoring bot message"

  elsif message_type == :message && !should_answer
    puts "Ignoring message"

  else
    respond_with_nomi("#{event.author.username} says #{event.content}", event, nomi_client)
  end
end

def respond_with_nomi(message, event, nomi_client)
  puts message
  response = nomi_client.chat(message)
  if response
    puts response
    event.respond "*#{nomi_client.nomi['name']}* #{response}"
  end
end

# When a message is sent in any channel the bot has access to, this event will trigger
bot.message do |event|
  event_handler(event, nomi_client, message_type: :message, bot: bot)
end

bot.mention do |event|
  event_handler(event, nomi_client, message_type: :mention, bot: bot)
end

# Run the bot
bot.run